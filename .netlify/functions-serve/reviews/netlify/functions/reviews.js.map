{
  "version": 3,
  "sources": ["../../../../Documents/Grimshaw Automotives/Grimshaw-Garage/netlify/functions/reviews.cjs"],
  "sourceRoot": "C:/Users/John/AppData/Local/Temp/tmp-28656-DtW9ytnVqeVJ",
  "sourcesContent": ["const https = require('https');\r\n\r\nexports.handler = async (event, context) => {\r\n  // Enable CORS\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n    'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  // Handle preflight requests\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: ''\r\n    };\r\n  }\r\n\r\n  // Only allow GET requests\r\n  if (event.httpMethod !== 'GET') {\r\n    return {\r\n      statusCode: 405,\r\n      headers,\r\n      body: JSON.stringify({ error: 'Method not allowed' })\r\n    };\r\n  }\r\n\r\n  try {\r\n    const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\r\n    const PLACE_ID = process.env.PLACE_ID || 'ChIJ0aIJp5VI1moROAQUYrnoHnU';\r\n\r\n    console.log('Environment check:', {\r\n      hasApiKey: !!GOOGLE_API_KEY,\r\n      hasPlaceId: !!PLACE_ID,\r\n      placeId: PLACE_ID\r\n    });\r\n\r\n    if (!GOOGLE_API_KEY) {\r\n      return {\r\n        statusCode: 500,\r\n        headers,\r\n        body: JSON.stringify({ \r\n          error: 'Missing GOOGLE_API_KEY environment variable',\r\n          details: 'Please add GOOGLE_API_KEY in Netlify environment variables'\r\n        })\r\n      };\r\n    }\r\n\r\n    // Use the new Google Places API (New) instead of legacy\r\n    const url = `https://places.googleapis.com/v1/places/${PLACE_ID}?fields=displayName,rating,reviews,userRatingCount&key=${GOOGLE_API_KEY}`;\r\n\r\n    console.log('Making request to new Places API:', url.replace(GOOGLE_API_KEY, 'API_KEY_HIDDEN'));\r\n\r\n    // Make request to Google Places API\r\n    const response = await new Promise((resolve, reject) => {\r\n      https.get(url, (res) => {\r\n        let data = '';\r\n        res.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n        res.on('end', () => {\r\n          try {\r\n            const parsed = JSON.parse(data);\r\n            resolve(parsed);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      }).on('error', (error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n\r\n    console.log('Google API response:', response);\r\n\r\n    // New Google Places API returns data directly (no \"result\" wrapper)\r\n    if (response.displayName) {\r\n      // Transform the response to match frontend expectations\r\n      // New API returns objects with {text, languageCode} format\r\n      const transformedResponse = {\r\n        name: response.displayName?.text || response.displayName || 'Grimshaw Automotive',\r\n        rating: response.rating || 5.0,\r\n        reviews: (response.reviews || [])\r\n          .map(review => ({\r\n            author_name: review.authorAttribution?.displayName || 'Anonymous',\r\n            author_url: review.authorAttribution?.uri || '',\r\n            language: review.originalText?.languageCode || 'en',\r\n            profile_photo_url: review.authorAttribution?.photoUri || '',\r\n            rating: review.rating || 5,\r\n            relative_time_description: review.relativePublishTimeDescription || 'Recent',\r\n            text: review.text?.text || review.originalText?.text || 'Great service!',\r\n            time: review.publishTime ? new Date(review.publishTime).getTime() : Date.now()\r\n          }))\r\n          .sort((a, b) => b.time - a.time) // Sort by most recent first\r\n          .slice(0, 6), // Show only the 6 most recent reviews\r\n        user_ratings_total: response.userRatingCount || 0\r\n      };\r\n      \r\n      console.log('Returning transformed response with', transformedResponse.reviews.length, 'reviews');\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(transformedResponse)\r\n      };\r\n    } else {\r\n      console.error('Google API error:', response);\r\n      return {\r\n        statusCode: 400,\r\n        headers,\r\n        body: JSON.stringify({ \r\n          error: 'Google Places API error',\r\n          details: response.error?.message || response.error_message || 'No data returned',\r\n          status: response.error?.code || 'UNKNOWN_ERROR'\r\n        })\r\n      };\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Function error:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Internal server error',\r\n        details: error.message\r\n      })\r\n    };\r\n  }\r\n}; "],
  "mappings": "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",
  "names": []
}
